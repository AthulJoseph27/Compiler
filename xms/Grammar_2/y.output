Terminals which are not used

   '>'
   '<'
   OR
   AND
   '/'


Grammar

    0 $accept: Program $end

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    2 Stmts: Stmts Stmt
    3      | Stmt

    4 Stmt: AsgStmt
    5     | IfStmt
    6     | IfElseStmt
    7     | RetStmt

    8 AsgStmt: VAR '=' E ';'

    9 IfStmt: IF '(' E ')' '{' Stmts '}'

   10 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' Stmts '}'

   11 RetStmt: RETURN E ';'

   12 E: E '+' E
   13  | E '-' E
   14  | E '*' E
   15  | E LE E
   16  | E GE E
   17  | E EE E
   18  | E NE E
   19  | '(' E ')'
   20  | NUM
   21  | VAR
   22  | FUN '(' E ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 1 9 10 19 22
')' (41) 1 9 10 19 22
'*' (42) 14
'+' (43) 12
'-' (45) 13
'/' (47)
';' (59) 1 8 11
'<' (60)
'=' (61) 1 8
'>' (62)
'{' (123) 1 9 10
'}' (125) 1 9 10
error (256)
NUM (258) 20
VAR (259) 1 8 21
RETURN (260) 11
IF (261) 9 10
FUN (262) 1 22
WRITE_VALUE (263) 1
READ_VALUE (264) 1
IFX (265)
ELSE (266) 10
OR (267)
AND (268)
NE (269) 18
EE (270) 17
LE (271) 15
GE (272) 16


Nonterminals, with rules where they appear

$accept (30)
    on left: 0
Program (31)
    on left: 1, on right: 0
Stmts (32)
    on left: 2 3, on right: 1 2 9 10
Stmt (33)
    on left: 4 5 6 7, on right: 2 3
AsgStmt (34)
    on left: 8, on right: 4
IfStmt (35)
    on left: 9, on right: 5
IfElseStmt (36)
    on left: 10, on right: 6
RetStmt (37)
    on left: 11, on right: 7
E (38)
    on left: 12 13 14 15 16 17 18 19 20 21 22, on right: 8 9 10 11
    12 13 14 15 16 17 18 19 22


state 0

    0 $accept: . Program $end

    READ_VALUE  shift, and go to state 1

    Program  go to state 2


state 1

    1 Program: READ_VALUE . '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    '('  shift, and go to state 3


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 4


state 3

    1 Program: READ_VALUE '(' . VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    VAR  shift, and go to state 5


state 4

    0 $accept: Program $end .

    $default  accept


state 5

    1 Program: READ_VALUE '(' VAR . ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    ')'  shift, and go to state 6


state 6

    1 Program: READ_VALUE '(' VAR ')' . ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    ';'  shift, and go to state 7


state 7

    1 Program: READ_VALUE '(' VAR ')' ';' . VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    VAR  shift, and go to state 8


state 8

    1 Program: READ_VALUE '(' VAR ')' ';' VAR . '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    '='  shift, and go to state 9


state 9

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' . FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    FUN  shift, and go to state 10


state 10

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN . '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    '('  shift, and go to state 11


state 11

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' . VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    VAR  shift, and go to state 12


state 12

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR . ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    ')'  shift, and go to state 13


state 13

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' . '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    '{'  shift, and go to state 14


state 14

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' . Stmts '}' WRITE_VALUE '(' VAR ')' ';'

    VAR     shift, and go to state 15
    RETURN  shift, and go to state 16
    IF      shift, and go to state 17

    Stmts       go to state 18
    Stmt        go to state 19
    AsgStmt     go to state 20
    IfStmt      go to state 21
    IfElseStmt  go to state 22
    RetStmt     go to state 23


state 15

    8 AsgStmt: VAR . '=' E ';'

    '='  shift, and go to state 24


state 16

   11 RetStmt: RETURN . E ';'

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 29


state 17

    9 IfStmt: IF . '(' E ')' '{' Stmts '}'
   10 IfElseStmt: IF . '(' E ')' '{' Stmts '}' ELSE '{' Stmts '}'

    '('  shift, and go to state 30


state 18

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts . '}' WRITE_VALUE '(' VAR ')' ';'
    2 Stmts: Stmts . Stmt

    VAR     shift, and go to state 15
    RETURN  shift, and go to state 16
    IF      shift, and go to state 17
    '}'     shift, and go to state 31

    Stmt        go to state 32
    AsgStmt     go to state 20
    IfStmt      go to state 21
    IfElseStmt  go to state 22
    RetStmt     go to state 23


state 19

    3 Stmts: Stmt .

    $default  reduce using rule 3 (Stmts)


state 20

    4 Stmt: AsgStmt .

    $default  reduce using rule 4 (Stmt)


state 21

    5 Stmt: IfStmt .

    $default  reduce using rule 5 (Stmt)


state 22

    6 Stmt: IfElseStmt .

    $default  reduce using rule 6 (Stmt)


state 23

    7 Stmt: RetStmt .

    $default  reduce using rule 7 (Stmt)


state 24

    8 AsgStmt: VAR '=' . E ';'

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 33


state 25

   20 E: NUM .

    $default  reduce using rule 20 (E)


state 26

   21 E: VAR .

    $default  reduce using rule 21 (E)


state 27

   22 E: FUN . '(' E ')'

    '('  shift, and go to state 34


state 28

   19 E: '(' . E ')'

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 35


state 29

   11 RetStmt: RETURN E . ';'
   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E

    NE   shift, and go to state 36
    EE   shift, and go to state 37
    LE   shift, and go to state 38
    GE   shift, and go to state 39
    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    ';'  shift, and go to state 43


state 30

    9 IfStmt: IF '(' . E ')' '{' Stmts '}'
   10 IfElseStmt: IF '(' . E ')' '{' Stmts '}' ELSE '{' Stmts '}'

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 44


state 31

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' . WRITE_VALUE '(' VAR ')' ';'

    WRITE_VALUE  shift, and go to state 45


state 32

    2 Stmts: Stmts Stmt .

    $default  reduce using rule 2 (Stmts)


state 33

    8 AsgStmt: VAR '=' E . ';'
   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E

    NE   shift, and go to state 36
    EE   shift, and go to state 37
    LE   shift, and go to state 38
    GE   shift, and go to state 39
    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    ';'  shift, and go to state 46


state 34

   22 E: FUN '(' . E ')'

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 47


state 35

   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E
   19  | '(' E . ')'

    NE   shift, and go to state 36
    EE   shift, and go to state 37
    LE   shift, and go to state 38
    GE   shift, and go to state 39
    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    ')'  shift, and go to state 48


state 36

   18 E: E NE . E

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 49


state 37

   17 E: E EE . E

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 50


state 38

   15 E: E LE . E

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 51


state 39

   16 E: E GE . E

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 52


state 40

   12 E: E '+' . E

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 53


state 41

   13 E: E '-' . E

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 54


state 42

   14 E: E '*' . E

    NUM  shift, and go to state 25
    VAR  shift, and go to state 26
    FUN  shift, and go to state 27
    '('  shift, and go to state 28

    E  go to state 55


state 43

   11 RetStmt: RETURN E ';' .

    $default  reduce using rule 11 (RetStmt)


state 44

    9 IfStmt: IF '(' E . ')' '{' Stmts '}'
   10 IfElseStmt: IF '(' E . ')' '{' Stmts '}' ELSE '{' Stmts '}'
   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E

    NE   shift, and go to state 36
    EE   shift, and go to state 37
    LE   shift, and go to state 38
    GE   shift, and go to state 39
    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    ')'  shift, and go to state 56


state 45

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE . '(' VAR ')' ';'

    '('  shift, and go to state 57


state 46

    8 AsgStmt: VAR '=' E ';' .

    $default  reduce using rule 8 (AsgStmt)


state 47

   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E
   22  | FUN '(' E . ')'

    NE   shift, and go to state 36
    EE   shift, and go to state 37
    LE   shift, and go to state 38
    GE   shift, and go to state 39
    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42
    ')'  shift, and go to state 58


state 48

   19 E: '(' E ')' .

    $default  reduce using rule 19 (E)


state 49

   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E
   18  | E NE E .

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42

    $default  reduce using rule 18 (E)


state 50

   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   17  | E EE E .
   18  | E . NE E

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42

    $default  reduce using rule 17 (E)


state 51

   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   15  | E LE E .
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42

    $default  reduce using rule 15 (E)


state 52

   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   16  | E GE E .
   17  | E . EE E
   18  | E . NE E

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41
    '*'  shift, and go to state 42

    $default  reduce using rule 16 (E)


state 53

   12 E: E . '+' E
   12  | E '+' E .
   13  | E . '-' E
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E

    '*'  shift, and go to state 42

    $default  reduce using rule 12 (E)


state 54

   12 E: E . '+' E
   13  | E . '-' E
   13  | E '-' E .
   14  | E . '*' E
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E

    '*'  shift, and go to state 42

    $default  reduce using rule 13 (E)


state 55

   12 E: E . '+' E
   13  | E . '-' E
   14  | E . '*' E
   14  | E '*' E .
   15  | E . LE E
   16  | E . GE E
   17  | E . EE E
   18  | E . NE E

    $default  reduce using rule 14 (E)


state 56

    9 IfStmt: IF '(' E ')' . '{' Stmts '}'
   10 IfElseStmt: IF '(' E ')' . '{' Stmts '}' ELSE '{' Stmts '}'

    '{'  shift, and go to state 59


state 57

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' . VAR ')' ';'

    VAR  shift, and go to state 60


state 58

   22 E: FUN '(' E ')' .

    $default  reduce using rule 22 (E)


state 59

    9 IfStmt: IF '(' E ')' '{' . Stmts '}'
   10 IfElseStmt: IF '(' E ')' '{' . Stmts '}' ELSE '{' Stmts '}'

    VAR     shift, and go to state 15
    RETURN  shift, and go to state 16
    IF      shift, and go to state 17

    Stmts       go to state 61
    Stmt        go to state 19
    AsgStmt     go to state 20
    IfStmt      go to state 21
    IfElseStmt  go to state 22
    RetStmt     go to state 23


state 60

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR . ')' ';'

    ')'  shift, and go to state 62


state 61

    2 Stmts: Stmts . Stmt
    9 IfStmt: IF '(' E ')' '{' Stmts . '}'
   10 IfElseStmt: IF '(' E ')' '{' Stmts . '}' ELSE '{' Stmts '}'

    VAR     shift, and go to state 15
    RETURN  shift, and go to state 16
    IF      shift, and go to state 17
    '}'     shift, and go to state 63

    Stmt        go to state 32
    AsgStmt     go to state 20
    IfStmt      go to state 21
    IfElseStmt  go to state 22
    RetStmt     go to state 23


state 62

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' . ';'

    ';'  shift, and go to state 64


state 63

    9 IfStmt: IF '(' E ')' '{' Stmts '}' .
   10 IfElseStmt: IF '(' E ')' '{' Stmts '}' . ELSE '{' Stmts '}'

    ELSE  shift, and go to state 65

    $default  reduce using rule 9 (IfStmt)


state 64

    1 Program: READ_VALUE '(' VAR ')' ';' VAR '=' FUN '(' VAR ')' '{' Stmts '}' WRITE_VALUE '(' VAR ')' ';' .

    $default  reduce using rule 1 (Program)


state 65

   10 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE . '{' Stmts '}'

    '{'  shift, and go to state 66


state 66

   10 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' . Stmts '}'

    VAR     shift, and go to state 15
    RETURN  shift, and go to state 16
    IF      shift, and go to state 17

    Stmts       go to state 67
    Stmt        go to state 19
    AsgStmt     go to state 20
    IfStmt      go to state 21
    IfElseStmt  go to state 22
    RetStmt     go to state 23


state 67

    2 Stmts: Stmts . Stmt
   10 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' Stmts . '}'

    VAR     shift, and go to state 15
    RETURN  shift, and go to state 16
    IF      shift, and go to state 17
    '}'     shift, and go to state 68

    Stmt        go to state 32
    AsgStmt     go to state 20
    IfStmt      go to state 21
    IfElseStmt  go to state 22
    RetStmt     go to state 23


state 68

   10 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' Stmts '}' .

    $default  reduce using rule 10 (IfElseStmt)
