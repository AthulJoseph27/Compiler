Terminals which are not used

   WHILE
   DO
   OR
   AND
   '-'
   '/'


Grammar

    0 $accept: Program $end

    1 Program: FUN '(' ')' '{' Stmts '}'

    2 Stmts: Stmts Stmt
    3      | Stmt

    4 Stmt: AsgStmt
    5     | ReadStmt
    6     | WriteStmt
    7     | IfStmt
    8     | IfElseStmt

    9 AsgStmt: VAR '=' E ';'

   10 IfStmt: IF '(' E ')' '{' Stmts '}'

   11 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' Stmts '}'

   12 ReadStmt: READ_VALUE '(' VAR ')' ';'

   13 WriteStmt: WRITE_VALUE '(' E ')' ';'

   14 E: NUM
   15  | VAR
   16  | E '+' E
   17  | E '*' E
   18  | E '>' E
   19  | E '<' E
   20  | E LE E
   21  | E GE E
   22  | E NE E
   23  | E EE E
   24  | '(' E ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 1 10 11 12 13 24
')' (41) 1 10 11 12 13 24
'*' (42) 17
'+' (43) 16
'-' (45)
'/' (47)
';' (59) 9 12 13
'<' (60) 19
'=' (61) 9
'>' (62) 18
'{' (123) 1 10 11
'}' (125) 1 10 11
error (256)
NUM (258) 14
VAR (259) 9 12 15
WHILE (260)
IF (261) 10 11
FUN (262) 1
WRITE_VALUE (263) 13
READ_VALUE (264) 12
DO (265)
IFX (266)
ELSE (267) 11
OR (268)
AND (269)
NE (270) 22
EE (271) 23
LE (272) 20
GE (273) 21


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
Program (32)
    on left: 1, on right: 0
Stmts (33)
    on left: 2 3, on right: 1 2 10 11
Stmt (34)
    on left: 4 5 6 7 8, on right: 2 3
AsgStmt (35)
    on left: 9, on right: 4
IfStmt (36)
    on left: 10, on right: 7
IfElseStmt (37)
    on left: 11, on right: 8
ReadStmt (38)
    on left: 12, on right: 5
WriteStmt (39)
    on left: 13, on right: 6
E (40)
    on left: 14 15 16 17 18 19 20 21 22 23 24, on right: 9 10 11 13
    16 17 18 19 20 21 22 23 24


state 0

    0 $accept: . Program $end

    FUN  shift, and go to state 1

    Program  go to state 2


state 1

    1 Program: FUN . '(' ')' '{' Stmts '}'

    '('  shift, and go to state 3


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 4


state 3

    1 Program: FUN '(' . ')' '{' Stmts '}'

    ')'  shift, and go to state 5


state 4

    0 $accept: Program $end .

    $default  accept


state 5

    1 Program: FUN '(' ')' . '{' Stmts '}'

    '{'  shift, and go to state 6


state 6

    1 Program: FUN '(' ')' '{' . Stmts '}'

    VAR          shift, and go to state 7
    IF           shift, and go to state 8
    WRITE_VALUE  shift, and go to state 9
    READ_VALUE   shift, and go to state 10

    Stmts       go to state 11
    Stmt        go to state 12
    AsgStmt     go to state 13
    IfStmt      go to state 14
    IfElseStmt  go to state 15
    ReadStmt    go to state 16
    WriteStmt   go to state 17


state 7

    9 AsgStmt: VAR . '=' E ';'

    '='  shift, and go to state 18


state 8

   10 IfStmt: IF . '(' E ')' '{' Stmts '}'
   11 IfElseStmt: IF . '(' E ')' '{' Stmts '}' ELSE '{' Stmts '}'

    '('  shift, and go to state 19


state 9

   13 WriteStmt: WRITE_VALUE . '(' E ')' ';'

    '('  shift, and go to state 20


state 10

   12 ReadStmt: READ_VALUE . '(' VAR ')' ';'

    '('  shift, and go to state 21


state 11

    1 Program: FUN '(' ')' '{' Stmts . '}'
    2 Stmts: Stmts . Stmt

    VAR          shift, and go to state 7
    IF           shift, and go to state 8
    WRITE_VALUE  shift, and go to state 9
    READ_VALUE   shift, and go to state 10
    '}'          shift, and go to state 22

    Stmt        go to state 23
    AsgStmt     go to state 13
    IfStmt      go to state 14
    IfElseStmt  go to state 15
    ReadStmt    go to state 16
    WriteStmt   go to state 17


state 12

    3 Stmts: Stmt .

    $default  reduce using rule 3 (Stmts)


state 13

    4 Stmt: AsgStmt .

    $default  reduce using rule 4 (Stmt)


state 14

    7 Stmt: IfStmt .

    $default  reduce using rule 7 (Stmt)


state 15

    8 Stmt: IfElseStmt .

    $default  reduce using rule 8 (Stmt)


state 16

    5 Stmt: ReadStmt .

    $default  reduce using rule 5 (Stmt)


state 17

    6 Stmt: WriteStmt .

    $default  reduce using rule 6 (Stmt)


state 18

    9 AsgStmt: VAR '=' . E ';'

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 27


state 19

   10 IfStmt: IF '(' . E ')' '{' Stmts '}'
   11 IfElseStmt: IF '(' . E ')' '{' Stmts '}' ELSE '{' Stmts '}'

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 28


state 20

   13 WriteStmt: WRITE_VALUE '(' . E ')' ';'

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 29


state 21

   12 ReadStmt: READ_VALUE '(' . VAR ')' ';'

    VAR  shift, and go to state 30


state 22

    1 Program: FUN '(' ')' '{' Stmts '}' .

    $default  reduce using rule 1 (Program)


state 23

    2 Stmts: Stmts Stmt .

    $default  reduce using rule 2 (Stmts)


state 24

   14 E: NUM .

    $default  reduce using rule 14 (E)


state 25

   15 E: VAR .

    $default  reduce using rule 15 (E)


state 26

   24 E: '(' . E ')'

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 31


state 27

    9 AsgStmt: VAR '=' E . ';'
   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E

    '>'  shift, and go to state 32
    '<'  shift, and go to state 33
    NE   shift, and go to state 34
    EE   shift, and go to state 35
    LE   shift, and go to state 36
    GE   shift, and go to state 37
    '+'  shift, and go to state 38
    '*'  shift, and go to state 39
    ';'  shift, and go to state 40


state 28

   10 IfStmt: IF '(' E . ')' '{' Stmts '}'
   11 IfElseStmt: IF '(' E . ')' '{' Stmts '}' ELSE '{' Stmts '}'
   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E

    '>'  shift, and go to state 32
    '<'  shift, and go to state 33
    NE   shift, and go to state 34
    EE   shift, and go to state 35
    LE   shift, and go to state 36
    GE   shift, and go to state 37
    '+'  shift, and go to state 38
    '*'  shift, and go to state 39
    ')'  shift, and go to state 41


state 29

   13 WriteStmt: WRITE_VALUE '(' E . ')' ';'
   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E

    '>'  shift, and go to state 32
    '<'  shift, and go to state 33
    NE   shift, and go to state 34
    EE   shift, and go to state 35
    LE   shift, and go to state 36
    GE   shift, and go to state 37
    '+'  shift, and go to state 38
    '*'  shift, and go to state 39
    ')'  shift, and go to state 42


state 30

   12 ReadStmt: READ_VALUE '(' VAR . ')' ';'

    ')'  shift, and go to state 43


state 31

   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E
   24  | '(' E . ')'

    '>'  shift, and go to state 32
    '<'  shift, and go to state 33
    NE   shift, and go to state 34
    EE   shift, and go to state 35
    LE   shift, and go to state 36
    GE   shift, and go to state 37
    '+'  shift, and go to state 38
    '*'  shift, and go to state 39
    ')'  shift, and go to state 44


state 32

   18 E: E '>' . E

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 45


state 33

   19 E: E '<' . E

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 46


state 34

   22 E: E NE . E

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 47


state 35

   23 E: E EE . E

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 48


state 36

   20 E: E LE . E

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 49


state 37

   21 E: E GE . E

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 50


state 38

   16 E: E '+' . E

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 51


state 39

   17 E: E '*' . E

    NUM  shift, and go to state 24
    VAR  shift, and go to state 25
    '('  shift, and go to state 26

    E  go to state 52


state 40

    9 AsgStmt: VAR '=' E ';' .

    $default  reduce using rule 9 (AsgStmt)


state 41

   10 IfStmt: IF '(' E ')' . '{' Stmts '}'
   11 IfElseStmt: IF '(' E ')' . '{' Stmts '}' ELSE '{' Stmts '}'

    '{'  shift, and go to state 53


state 42

   13 WriteStmt: WRITE_VALUE '(' E ')' . ';'

    ';'  shift, and go to state 54


state 43

   12 ReadStmt: READ_VALUE '(' VAR ')' . ';'

    ';'  shift, and go to state 55


state 44

   24 E: '(' E ')' .

    $default  reduce using rule 24 (E)


state 45

   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   18  | E '>' E .
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E

    '+'  shift, and go to state 38
    '*'  shift, and go to state 39

    $default  reduce using rule 18 (E)


state 46

   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   19  | E '<' E .
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E

    '+'  shift, and go to state 38
    '*'  shift, and go to state 39

    $default  reduce using rule 19 (E)


state 47

   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   22  | E NE E .
   23  | E . EE E

    '+'  shift, and go to state 38
    '*'  shift, and go to state 39

    $default  reduce using rule 22 (E)


state 48

   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E
   23  | E EE E .

    '+'  shift, and go to state 38
    '*'  shift, and go to state 39

    $default  reduce using rule 23 (E)


state 49

   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   20  | E LE E .
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E

    '+'  shift, and go to state 38
    '*'  shift, and go to state 39

    $default  reduce using rule 20 (E)


state 50

   16 E: E . '+' E
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   21  | E GE E .
   22  | E . NE E
   23  | E . EE E

    '+'  shift, and go to state 38
    '*'  shift, and go to state 39

    $default  reduce using rule 21 (E)


state 51

   16 E: E . '+' E
   16  | E '+' E .
   17  | E . '*' E
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E

    '*'  shift, and go to state 39

    $default  reduce using rule 16 (E)


state 52

   16 E: E . '+' E
   17  | E . '*' E
   17  | E '*' E .
   18  | E . '>' E
   19  | E . '<' E
   20  | E . LE E
   21  | E . GE E
   22  | E . NE E
   23  | E . EE E

    $default  reduce using rule 17 (E)


state 53

   10 IfStmt: IF '(' E ')' '{' . Stmts '}'
   11 IfElseStmt: IF '(' E ')' '{' . Stmts '}' ELSE '{' Stmts '}'

    VAR          shift, and go to state 7
    IF           shift, and go to state 8
    WRITE_VALUE  shift, and go to state 9
    READ_VALUE   shift, and go to state 10

    Stmts       go to state 56
    Stmt        go to state 12
    AsgStmt     go to state 13
    IfStmt      go to state 14
    IfElseStmt  go to state 15
    ReadStmt    go to state 16
    WriteStmt   go to state 17


state 54

   13 WriteStmt: WRITE_VALUE '(' E ')' ';' .

    $default  reduce using rule 13 (WriteStmt)


state 55

   12 ReadStmt: READ_VALUE '(' VAR ')' ';' .

    $default  reduce using rule 12 (ReadStmt)


state 56

    2 Stmts: Stmts . Stmt
   10 IfStmt: IF '(' E ')' '{' Stmts . '}'
   11 IfElseStmt: IF '(' E ')' '{' Stmts . '}' ELSE '{' Stmts '}'

    VAR          shift, and go to state 7
    IF           shift, and go to state 8
    WRITE_VALUE  shift, and go to state 9
    READ_VALUE   shift, and go to state 10
    '}'          shift, and go to state 57

    Stmt        go to state 23
    AsgStmt     go to state 13
    IfStmt      go to state 14
    IfElseStmt  go to state 15
    ReadStmt    go to state 16
    WriteStmt   go to state 17


state 57

   10 IfStmt: IF '(' E ')' '{' Stmts '}' .
   11 IfElseStmt: IF '(' E ')' '{' Stmts '}' . ELSE '{' Stmts '}'

    ELSE  shift, and go to state 58

    $default  reduce using rule 10 (IfStmt)


state 58

   11 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE . '{' Stmts '}'

    '{'  shift, and go to state 59


state 59

   11 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' . Stmts '}'

    VAR          shift, and go to state 7
    IF           shift, and go to state 8
    WRITE_VALUE  shift, and go to state 9
    READ_VALUE   shift, and go to state 10

    Stmts       go to state 60
    Stmt        go to state 12
    AsgStmt     go to state 13
    IfStmt      go to state 14
    IfElseStmt  go to state 15
    ReadStmt    go to state 16
    WriteStmt   go to state 17


state 60

    2 Stmts: Stmts . Stmt
   11 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' Stmts . '}'

    VAR          shift, and go to state 7
    IF           shift, and go to state 8
    WRITE_VALUE  shift, and go to state 9
    READ_VALUE   shift, and go to state 10
    '}'          shift, and go to state 61

    Stmt        go to state 23
    AsgStmt     go to state 13
    IfStmt      go to state 14
    IfElseStmt  go to state 15
    ReadStmt    go to state 16
    WriteStmt   go to state 17


state 61

   11 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' Stmts '}' .

    $default  reduce using rule 11 (IfElseStmt)
